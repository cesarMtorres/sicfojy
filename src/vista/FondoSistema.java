/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FondoSistema.java
 *
 * Created on 27-abr-2014, 18:23:10
 */

package vista;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JTextField;
import modelo.ModPerfil;

/**
 *
 * @author rover
 */
public class FondoSistema extends javax.swing.JFrame {
    private static sesion vdcl;
    private Dimension dim;
    public static String mmaestra, mperfil, descrperf;
    /** Creates new form FondoSistema */
    public FondoSistema() {
        //con esto obtienes en tamano en en x y y de tu monitor
        dim=super.getToolkit().getScreenSize();
        mmaestra = "ADMIN";
        mperfil = "";
        descrperf = "";
        super.setSize(dim);
        //this.setLocationRelativeTo(null);
        initComponents();
        this.setExtendedState(FondoSistema.MAXIMIZED_BOTH);
        PanelFondo f = new PanelFondo(dim.width,dim.height-25,"/images/fondo1.png");
        this.add(f,BorderLayout.CENTER);
        this.setResizable(true);
        this.pack();
        
    }

    public static String getMperfil() {
        return mperfil;
    }

    public static void setMperfil(String mperfil) {
        FondoSistema.mperfil = mperfil;
    }
    
    //Función que Obtiene la Fecha Actual en el Formato DD-MM-AAAA
    public static String getFechaActual() {
        Date ahora = new Date();
        SimpleDateFormat formateador = new SimpleDateFormat("dd-MM-yyyy");
        return formateador.format(ahora);
    }
    //Función que Obtiene la Hora Actual en el Formato 24hrs.
    public static String getHoraActual() {
        Date ahora = new Date();
        SimpleDateFormat formateador = new SimpleDateFormat("HH:mm");
        return formateador.format(ahora);
    }
    //Función que Permite Ingresar Solo letras y numeros en un TextField
    public static void sLetrasoNum(final JTextField txt, final int tam){
        txt.addKeyListener(new KeyAdapter(){
            @Override
            public void keyTyped(KeyEvent e){
                char car = e.getKeyChar();
                if(!(Character.isLetterOrDigit(car) || !Character.isSpaceChar(car)) || (txt.getText().length()>=tam)) {
                    e.consume();
                }
            }
        });
    }
    //Función que Permite Ingresar Solo letras en un TextField
    public static void sLetras(final JTextField txt, final int tam){
        txt.addKeyListener(new KeyAdapter(){
            @Override
            public void keyTyped(KeyEvent e){
                char car = e.getKeyChar();
                if(!(Character.isLetter(car) || Character.isSpaceChar(car)) || (txt.getText().length()>=tam)) {
                    e.consume();
                }
            }
        });
    }
    //Función que Permite Ingresar Solo Numeros en un TextField
    public static void sNumeros(final JTextField txt, final int tam){
        txt.addKeyListener(new KeyAdapter(){
            @Override
            public void keyTyped(KeyEvent e){
                char car = e.getKeyChar();
                if(!Character.isDigit(car) || (txt.getText().length()>=tam)) {
                    e.consume();
                }
            }
        });
    }
    public static boolean accesar(String petique, String pmodu){
        boolean valido;
        valido = false;
        ModPerfil tmodper = new ModPerfil();

            
            if ("6".equals(mperfil)) {
                valido = true;
            }else{
            valido = tmodper.buscarPerfilxOpcion(mperfil, pmodu);
            if(valido){
                valido =true;
             /*   vdcl = new sesion();
                sesion.opcperf = pmodu;
               vdcl.jLabel1.setText(petique.trim()+":"+pmodu.trim());
                vdcl.setVisible(true);
                Runtime.getRuntime().gc();
                */
                
            }else{
                valido=false;
            }
            
            }
               
  //      boolean bitac = tmbitac.registrarBitacceso(pmodu, petique, Menu.mnomusu, valido, Principal.codusuario);
        System.out.println("fondo sistema:"+valido);
        return (valido);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new FondoSistema().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}
